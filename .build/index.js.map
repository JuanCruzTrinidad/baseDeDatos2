{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import { disconnect, getDatabase, insert } from \"./configdb\";\n\nasync function run() {\n  const database = await getDatabase();\n  let venta = database.collection(\"venta\");\n  \n await reporte7(venta);\n\n// const data = await database.collection('obra-social').find({}).toArray();\n// console.log(data, {depth: null});\n}\n\nrun().then(() => disconnect().then(() => console.dir(\"Se finalizo la conexi\u00F3n.\")))\n\nconst reporte1 = async (venta: any) => {\n    let and = [\n    { fecha: {$gt: new Date('01/01/2021')} },\n    { fecha: {$lte: new Date('01/01/2023')} },\n  ];\n\n  let ventaCount = await venta.count({ $and: and });\n\n  let sucursales = venta.aggregate([\n                      { $match: { $and: and } },\n                     { $group: { _id: \"$empleadoCaja.sucursal.nombre\", totalVentas: { $count: {} } } },\n                     { $sort: { totalVentas: -1 } }\n                   ]);\n\n  let sucursalesArray = [];\n  \n  while (await sucursales.hasNext()) {\n     sucursalesArray.push(await sucursales.next());\n  }\n\n  const reporte1 = { \"Total Ventas\": ventaCount, \"Ventas Por Sucursal\": sucursalesArray};\n  console.log(\"Reporte 1\")\n  console.log(reporte1);\n}\n\nconst reporte2 = async (venta: any) => {\n  let and = [\n    { fecha: {$gt: new Date('01/01/2021')} },\n    { fecha: {$lte: new Date('01/01/2023')} },\n  ];\n  \n  let ventaPorObraSocial = venta.aggregate([\n    { $match: { $and: and } },\n    { $group: { _id: \"$cliente.obraSocial.id\", nombreObraSocial: { $first: \"$cliente.obraSocial.nombre\" }, total: { $count: {} }  } },\n    { $sort: { total: -1 } }\n  ]);\n\n  let ventaPorObraSocialArray: any[]= [];\n  \n  while (await ventaPorObraSocial.hasNext()) {\n    let venta = await ventaPorObraSocial.next();\n    if(venta?._id === null) {\n      venta.nombreObraSocial = \"Privado\"\n    }\n    ventaPorObraSocialArray.push(venta);\n  }\n  \n  console.log(ventaPorObraSocialArray);\n}\n\nconst reporte3 = async (venta: any) => {\n  let and = [\n    { fecha: {$gt: new Date('01/01/2021')} },\n    { fecha: {$lte: new Date('01/01/2023')} },\n  ];\n\n  let totalVentas = venta.aggregate([\n    { $match: { $and: and } },\n    { $group: { _id: null, sum: { $sum: \"$total\" }  } }\n  ]);\n  \n    let total = (await totalVentas.next())?.sum;\n\n   let totalPorSucursal = venta.aggregate([\n                      { $match: { $and: and } },\n                     { $group: { _id: \"$empleadoCaja.sucursal.nombre\", totalVentas$: { $sum: \"$total\" } } },\n                     { $sort: { totalVentas: -1 } }\n                   ]);\n\n    let totalPorSucursalArray = [];\n  \n  while (await totalPorSucursal.hasNext()) {\n     totalPorSucursalArray.push(await totalPorSucursal.next());\n  }\n\n  const reporte3 = {\"Total Ventas $\": total, \"Sucursales\": totalPorSucursalArray}\n  console.log(reporte3)\n}\n\nconst reporte4 = async (venta: any) => {\n   let and = [\n    { fecha: {$gt: new Date('01/01/2021')} },\n    { fecha: {$lte: new Date('01/01/2023')} },\n  ];\n\n\n  let ventasPorTipo = venta.aggregate([\n  { $match: { $and: and } },\n  {$unwind: \"$productos\"}, //Desarma el array, hace un reduce en js.\n  { $group: { \n    _id: \"$productos.tipo\", \n    totalVentas: { $count: {} } } \n  },\n  { $sort: { totalVentas: -1 } }\n  ]);\n\n  let ventasPorTipoArray = [];\n  \n  while (await ventasPorTipo.hasNext()) {\n     ventasPorTipoArray.push(await ventasPorTipo.next());\n  }\n  console.log(\"Reporte 4\")\n  console.log(ventasPorTipoArray)\n}\n\nconst reporte5 = async (venta: any) => {\n  let rankingMontoPorProductoSucursal = venta.aggregate([\n  {$unwind: \"$productos\"}, //Desarma el array, hace un reduce en js.\n  { $group: { \n    _id:  { \n      producto: \"$productos.descripcion\", \n      sucursal: \"$empleadoCaja.sucursal.nombre\",\n    },\n    totalVentas: { $sum: \"$total\" } } \n  },\n  { $sort: { totalVentas: -1 } }\n  ]);\n\n  let data = [];\n  \n  while (await rankingMontoPorProductoSucursal.hasNext()) {\n     data.push(await rankingMontoPorProductoSucursal.next());\n  }\n  console.log(\"Reporte 5\")\n  console.log(data)\n}\n\nconst reporte6 = async (venta:any) => {\n   let rankingCantidadPorProductoSucursal = venta.aggregate([\n  {$unwind: \"$productos\"}, //Desarma el array, hace un reduce en js.\n  { $group: { \n    _id:  { \n      producto: \"$productos.descripcion\", \n      sucursal: \"$empleadoCaja.sucursal.nombre\",\n    },\n    totalVentas: { $count: {} } } \n  },\n  { $sort: { totalVentas: -1 } }\n  ]);\n\n  let data = [];\n  \n  while (await rankingCantidadPorProductoSucursal.hasNext()) {\n     data.push(await rankingCantidadPorProductoSucursal.next());\n  }\n  console.log(\"Reporte 6\")\n  console.log(data)\n}\n\nconst reporte7 = async (venta:any) => {\n  let rankingCantidadClientes = venta.aggregate([\n  { $group: { \n    _id:  {\n      clienteDni: \"$cliente.dni\",\n      clienteNombre: \"$cliente.nombre\",\n      clienteApellido: \"$cliente.apellido\"\n    },\n    totalVentas: { $count: {} } } \n  },\n  { $sort: { totalVentas: -1 } }\n  ]);\n\n  let data = [];\n  \n  while (await rankingCantidadClientes.hasNext()) {\n     data.push(await rankingCantidadClientes.next());\n  }\n  console.log(\"Reporte 7\")\n  console.log(data)\n}\n\nconst reporte8 = async (venta:any) => {\n  let rankingCantidadClientes = venta.aggregate([\n  { $group: { \n    _id: { \n      clienteDni: \"$cliente.dni\",\n      sucursal: \"$empleadoCaja.sucursal.nombre\"\n    },\n    totalVentas: { $count: {} } } \n  },\n  { $sort: { totalVentas: -1 } }\n  ]);\n\n  let data = [];\n  \n  while (await rankingCantidadClientes.hasNext()) {\n     data.push(await rankingCantidadClientes.next());\n  }\n  console.log(\"Reporte 8\")\n  console.log(data)\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,sBAAgD;AAEhD,qBAAqB;AACnB,QAAM,WAAW,MAAM;AACvB,MAAI,QAAQ,SAAS,WAAW;AAEjC,QAAM,SAAS;AAAA;AAMhB,MAAM,KAAK,MAAM,kCAAa,KAAK,MAAM,QAAQ,IAAI;AAErD,MAAM,WAAW,OAAO,UAAe;AACnC,MAAI,MAAM;AAAA,IACV,EAAE,OAAO,EAAC,KAAK,IAAI,KAAK;AAAA,IACxB,EAAE,OAAO,EAAC,MAAM,IAAI,KAAK;AAAA;AAG3B,MAAI,aAAa,MAAM,MAAM,MAAM,EAAE,MAAM;AAE3C,MAAI,aAAa,MAAM,UAAU;AAAA,IACb,EAAE,QAAQ,EAAE,MAAM;AAAA,IACnB,EAAE,QAAQ,EAAE,KAAK,iCAAiC,aAAa,EAAE,QAAQ;AAAA,IACzE,EAAE,OAAO,EAAE,aAAa;AAAA;AAG3C,MAAI,kBAAkB;AAEtB,SAAO,MAAM,WAAW,WAAW;AAChC,oBAAgB,KAAK,MAAM,WAAW;AAAA;AAGzC,QAAM,YAAW,EAAE,gBAAgB,YAAY,uBAAuB;AACtE,UAAQ,IAAI;AACZ,UAAQ,IAAI;AAAA;AAGd,MAAM,WAAW,OAAO,UAAe;AACrC,MAAI,MAAM;AAAA,IACR,EAAE,OAAO,EAAC,KAAK,IAAI,KAAK;AAAA,IACxB,EAAE,OAAO,EAAC,MAAM,IAAI,KAAK;AAAA;AAG3B,MAAI,qBAAqB,MAAM,UAAU;AAAA,IACvC,EAAE,QAAQ,EAAE,MAAM;AAAA,IAClB,EAAE,QAAQ,EAAE,KAAK,0BAA0B,kBAAkB,EAAE,QAAQ,gCAAgC,OAAO,EAAE,QAAQ;AAAA,IACxH,EAAE,OAAO,EAAE,OAAO;AAAA;AAGpB,MAAI,0BAAgC;AAEpC,SAAO,MAAM,mBAAmB,WAAW;AACzC,QAAI,SAAQ,MAAM,mBAAmB;AACrC,QAAG,kCAAO,SAAQ,MAAM;AACtB,aAAM,mBAAmB;AAAA;AAE3B,4BAAwB,KAAK;AAAA;AAG/B,UAAQ,IAAI;AAAA;AAGd,MAAM,WAAW,OAAO,UAAe;AAhEvC;AAiEE,MAAI,MAAM;AAAA,IACR,EAAE,OAAO,EAAC,KAAK,IAAI,KAAK;AAAA,IACxB,EAAE,OAAO,EAAC,MAAM,IAAI,KAAK;AAAA;AAG3B,MAAI,cAAc,MAAM,UAAU;AAAA,IAChC,EAAE,QAAQ,EAAE,MAAM;AAAA,IAClB,EAAE,QAAQ,EAAE,KAAK,MAAM,KAAK,EAAE,MAAM;AAAA;AAGpC,MAAI,QAAS,YAAM,YAAY,WAAlB,mBAA2B;AAEzC,MAAI,mBAAmB,MAAM,UAAU;AAAA,IACpB,EAAE,QAAQ,EAAE,MAAM;AAAA,IACnB,EAAE,QAAQ,EAAE,KAAK,iCAAiC,cAAc,EAAE,MAAM;AAAA,IACxE,EAAE,OAAO,EAAE,aAAa;AAAA;AAGzC,MAAI,wBAAwB;AAE9B,SAAO,MAAM,iBAAiB,WAAW;AACtC,0BAAsB,KAAK,MAAM,iBAAiB;AAAA;AAGrD,QAAM,YAAW,EAAC,kBAAkB,OAAO,cAAc;AACzD,UAAQ,IAAI;AAAA;AAGd,MAAM,WAAW,OAAO,UAAe;AACpC,MAAI,MAAM;AAAA,IACT,EAAE,OAAO,EAAC,KAAK,IAAI,KAAK;AAAA,IACxB,EAAE,OAAO,EAAC,MAAM,IAAI,KAAK;AAAA;AAI3B,MAAI,gBAAgB,MAAM,UAAU;AAAA,IACpC,EAAE,QAAQ,EAAE,MAAM;AAAA,IAClB,EAAC,SAAS;AAAA,IACV;AAAA,MAAE,QAAQ;AAAA,QACR,KAAK;AAAA,QACL,aAAa,EAAE,QAAQ;AAAA;AAAA;AAAA,IAEzB,EAAE,OAAO,EAAE,aAAa;AAAA;AAGxB,MAAI,qBAAqB;AAEzB,SAAO,MAAM,cAAc,WAAW;AACnC,uBAAmB,KAAK,MAAM,cAAc;AAAA;AAE/C,UAAQ,IAAI;AACZ,UAAQ,IAAI;AAAA;AAGd,MAAM,WAAW,OAAO,UAAe;AACrC,MAAI,kCAAkC,MAAM,UAAU;AAAA,IACtD,EAAC,SAAS;AAAA,IACV;AAAA,MAAE,QAAQ;AAAA,QACR,KAAM;AAAA,UACJ,UAAU;AAAA,UACV,UAAU;AAAA;AAAA,QAEZ,aAAa,EAAE,MAAM;AAAA;AAAA;AAAA,IAEvB,EAAE,OAAO,EAAE,aAAa;AAAA;AAGxB,MAAI,OAAO;AAEX,SAAO,MAAM,gCAAgC,WAAW;AACrD,SAAK,KAAK,MAAM,gCAAgC;AAAA;AAEnD,UAAQ,IAAI;AACZ,UAAQ,IAAI;AAAA;AAGd,MAAM,WAAW,OAAO,UAAc;AACnC,MAAI,qCAAqC,MAAM,UAAU;AAAA,IAC1D,EAAC,SAAS;AAAA,IACV;AAAA,MAAE,QAAQ;AAAA,QACR,KAAM;AAAA,UACJ,UAAU;AAAA,UACV,UAAU;AAAA;AAAA,QAEZ,aAAa,EAAE,QAAQ;AAAA;AAAA;AAAA,IAEzB,EAAE,OAAO,EAAE,aAAa;AAAA;AAGxB,MAAI,OAAO;AAEX,SAAO,MAAM,mCAAmC,WAAW;AACxD,SAAK,KAAK,MAAM,mCAAmC;AAAA;AAEtD,UAAQ,IAAI;AACZ,UAAQ,IAAI;AAAA;AAGd,MAAM,WAAW,OAAO,UAAc;AACpC,MAAI,0BAA0B,MAAM,UAAU;AAAA,IAC9C;AAAA,MAAE,QAAQ;AAAA,QACR,KAAM;AAAA,UACJ,YAAY;AAAA,UACZ,eAAe;AAAA,UACf,iBAAiB;AAAA;AAAA,QAEnB,aAAa,EAAE,QAAQ;AAAA;AAAA;AAAA,IAEzB,EAAE,OAAO,EAAE,aAAa;AAAA;AAGxB,MAAI,OAAO;AAEX,SAAO,MAAM,wBAAwB,WAAW;AAC7C,SAAK,KAAK,MAAM,wBAAwB;AAAA;AAE3C,UAAQ,IAAI;AACZ,UAAQ,IAAI;AAAA;AAGd,MAAM,WAAW,OAAO,UAAc;AACpC,MAAI,0BAA0B,MAAM,UAAU;AAAA,IAC9C;AAAA,MAAE,QAAQ;AAAA,QACR,KAAK;AAAA,UACH,YAAY;AAAA,UACZ,UAAU;AAAA;AAAA,QAEZ,aAAa,EAAE,QAAQ;AAAA;AAAA;AAAA,IAEzB,EAAE,OAAO,EAAE,aAAa;AAAA;AAGxB,MAAI,OAAO;AAEX,SAAO,MAAM,wBAAwB,WAAW;AAC7C,SAAK,KAAK,MAAM,wBAAwB;AAAA;AAE3C,UAAQ,IAAI;AACZ,UAAQ,IAAI;AAAA;",
  "names": []
}
